= 0 Series Library Dev-Guide
:icons: font
:source-highlighter: prettify
:toc: left

== Vorwort

In diesem Guide werden einige *spezielle* Aspekte der Library erwähnt, der Großteil wie z.B. Register oder Port Strukturen setze ich als gegeben vorraus.

== HW Files

Die Software Basiert Komplett auf den im folgenden erläuterten automatisch generierten Dateien. Aus der HW-Beschreibung von Atmel (*.atdf) wird mit einem mitgelieferten Parser eine C++ Struktur erzeugt, diese Struktur wird später in der Library verwendet.

NOTE: Die EventSystem Dateien liegen zwar im selben Ordner, jedoch sind diese wegen ihrer speziellen Struktur von Hand erstellt

=== Der Header

[source, C++]
----
#pragma once
 #include "../../hw_abstractions/Port.hpp"
 #include "../../tools/meta.h" # <1>

namespace mega4808 { # <2>
    namespace spi_details { # <3>
----
<1> Notwendige includes
<2> Device-Namespace -> jeweils 'mega' + die Nummer
<3> Komponenten-Namespace -> jeweils die Komponente und '_details'

Jede HW-Datei beginnt nach dem obigen Schema, wegen der Namespaces sind die einzelnen Geräte und Komponenten eindeutig voneinander getrennt.

=== Die Komponente

[source,C++]
----
struct spiComponent {

	//lines omitted....
	
	enum class INTFLAGSMasks : mem_width {
		Bufovf = SPI_BUFOVF_bm,
		Dreif = SPI_DREIF_bm,
		Rxcif = SPI_RXCIF_bm,
		Ssif = SPI_SSIF_bm,
		Txcif = SPI_TXCIF_bm,
		If = SPI_IF_bm,
		Wrcol = SPI_WRCOL_bm
	}; # <1>

	struct registers {
		using ctrla = utils::Pair<reg::Register<reg::accessmode::RW,reg::specialization::Control,CTRLAMasks>,0x0>;
		using ctrlb = utils::Pair<reg::Register<reg::accessmode::RW,reg::specialization::Control,CTRLBMasks>,0x1>;
		using data = utils::Pair<reg::Register<reg::accessmode::RW,reg::specialization::Data>,0x4>;
		using intctrl = utils::Pair<reg::Register<reg::accessmode::RW,reg::specialization::Control,INTCTRLMasks>,0x2>;
		using intflags = utils::Pair<reg::Register<reg::accessmode::RW,reg::specialization::Control,INTFLAGSMasks>,0x3>; # <2>
		ctrla::type Ctrla;
		ctrlb::type Ctrlb;
		intctrl::type Intctrl;
		intflags::type Intflags;
		data::type Data; # <3>
	}; 
}; 
----
<1> Spezial-Bits für das Register 'intflags' 
<2> Registertypen und Namen
<3> Register Variablen Deklarationen

.Die Komponenten Struktur besteht im Grunde aus 2 wesentlichen Teilen: 
* Einige Enum-Klassen die Später den Registern als typ dient um Funktionen bereit zustellen, somit ist das übergeben von nichtbenannten Werten nur erschwert möglich.
* Die 'registers' Struktur welche  die Registertyp-Deklarationen und Register-Variablen Deklarationen enthält.

Die 'registers' Struktur enthält alle definierten Register der Komponente, diese sind aus der atdf-Datei abgeleitet und somit sind auch die Attribute des Typs gewählt (Schreibschutz, Größe ....). Die Variablen Deklarationen sind in der Register Struktur vorhanden um die legacy Funktionen "getBaseAddress" aus der BareMetal-CPP Library zu ermöglichen, in der eigentlichen Library finden sie keine Anwendung. Die Registertypen sind als Pair angegeben und habe noch den Offset-Wert mit angegeben für eine spezielle Funktion innerhalb der Port Abstraktion.

NOTE: Das Attribut Packed muss nicht für die einzelnen Strukturen gesetzt werden, dem Compiler wird das Flag 'fpack-struct' übergeben.

=== Die Instanzen

[source,C++]
----
//lines omitted...

struct spis {
	template<auto N ,bool dummy = true>
	struct inst;

	template<bool dummy>
	struct inst<0, dummy> # <1>
	 {
		template<auto N ,bool dummy1 = true>
		struct alt;
	
		[[nodiscard,gnu::always_inline]] static inline auto& value()  { return SPI0;} # <2> 
	
		template<bool dummy1>
		struct alt<1, dummy1> # <3> 
		 {
			struct Miso {
				using pin0 = AVR::port::details::PortPin<port_details::port<port_details::ports::portc>,1>;
			};
		
			struct Mosi {
				using pin0 = AVR::port::details::PortPin<port_details::port<port_details::ports::portc>,0>;
			};
		
			struct Sck {
				using pin0 = AVR::port::details::PortPin<port_details::port<port_details::ports::portc>,2>;
			};
		
			struct Ss {
				using pin0 = AVR::port::details::PortPin<port_details::port<port_details::ports::portc>,3>;
			}; # <4>
		
			using list = Meta::List<typename Miso::pin0, typename Mosi::pin0, typename Sck::pin0, typename Ss::pin0>; # <5>
		};
	
		template<bool dummy1>
		struct alt<0, dummy1>
		 {
			//lines omitted...
		};
	
	};

};
----
<1> Konkrete Instanz einer Ressource
<2> Funktion welche die von Microchip definierte Struktur zurückgibt
<3> Die Portmux-Variante
<4> die verschiedenen Gruppen innerhalb einer Portmux-Variante 
<5> Liste von allen Pins die von der Ressource belegt werden können

Der letzte Teil der HW Dateien besteht aus der 'spis' Struktur, diese ist eine Sammlung an Ressourcen-Instanzen der Komponente (z.B. USART0, USART1 ...). Die value Funktion wird in der Library an verschiedenen Stellen verwendet, z.B. in der Port Klasse, die Verwendung dieser Strukturen birgt den Vorteil, dass automatisch Änderungen von Microchip übernommen werden. Die Liste der Pins wird im Ressource Controller benötigt um die Kollisionsfreiheit zwischen den Ressourcen zu überprüfen.

NOTE: Die oben beschriebene Struktur ist nur relevant wenn die Komponente I/O Pins verwendet

== Die Microcontrollerklassen

In den Microcontrollerklassen werden die HW-files inkludiert, des Weiteren stellen die Klassen die Komponenten und deren Konfigurationen zur Verfügung (für die Top-Level Funktionen im AVR-Namespace). Sollten weitere Controller der Library hinzugefügt werden, so wird empfohlen die 4808 oder 4809 Klasse zu kopieren und entsprechend abzuändern.

=== Header

[source,C++]
----
#pragma once
using mem_width = uint8_t;
using ptr_t = uintptr_t; # <1>
#include "../hw_abstractions/Basics.hpp"

//hw includes
#include "hal/ATmega4808PORT.hpp"
#include "mega4808/hal/Atmega4808EventSystem.hpp"
#include "hal/ATmega4808SPI.hpp"
#include "hal/ATmega4808TWI.hpp"
#include "hal/ATmega4808CPU.hpp"
#include "hal/ATmega4808USART.hpp"
#include "hal/ATmega4808ADC.hpp" # <2>
#include "../hw_abstractions/CPU.hpp"
#include "../hw_abstractions/RessourceController.hpp"
#include "../DeviceFamilys/ATmegaZero.hpp" # <3>
----
<1> In folgenden includes benötigte Typdefinitionen
<2> Hardware-Includes
<3> Von der Library benötigte includes

Zu Beginn werden in den Microcontrollerklassen die benötigten Include-Dateien und Typdefinitionen vorgenommen. Zuerst müssen immer die o.g. Typdefinitionen kommen, als erster Hardware-Include kommt immer der Port da dieser noch in den anderen HW-files verwendet wird.

=== Klasse

[source,C++]
----
template<auto frequency>
class Atmega4808 {

	template<typename Alias>
	friend struct AVR::rc::details::resolveComponent; # <1>
	
	template<typename MCU,typename FIRST,typename... PINS>
	friend class AVR::rc::ResController;
	
	public:

	struct isZero{}; # <2>

	static constexpr auto clockFrequency = frequency;
	
	template<typename T>
	static inline constexpr bool is_atomic(){
		return false;
	} # <3>
----
<1> Friend-Deklaration für eine Metafunktion zur Bestimmung der Instanzen von Komponenten
<2> Typdefinition für ein Concept
<3> Legacy-Funktion aus BMCPP

Innerhalb der Komponenten der Microcontrollerklassen befinden sich private Elemente, der RessourceController und die Metafunktion benötigen Zugriff auf diese, daher die Friend-Deklaration.

=== Spezialfall Port

[source,C++]
----
template<typename p> # <1>
struct Port {

	using port = typename utils::condEqual<AVR::port::A, p, port_details::port<port_details::ports::porta>,
			typename utils::condEqual<AVR::port::C, p, port_details::port<port_details::ports::portc>,
					typename utils::condEqual<AVR::port::D, p, port_details::port<port_details::ports::portd>,
							typename utils::condEqual<AVR::port::F, p, port_details::port<port_details::ports::portf>, void
							>::type
					>::type
			>::type
	>::type; # <2>

	static constexpr auto baseAddress = port::port; # <3>
	
	private:
	using Component_t = port_details::portComponent; # <4>
};
----
<1> Übergabe des Portnamen
<2> Übersetzung des Portnamen in den HW-Port
<3> Hilfsvariable für die getBaseAddress Funktion
<4> Typdeklaration der HW-Komponente

Innerhalb der Microcontrollerklasse ist der Port ein Ausnahmefall, weil er nur dazu dient den Portnamen zuzuordnen (und ggf. die legacy BMCPP-Funktion ermöglicht).

=== Komponenten

[source,C++]
----
struct USART : public AVR::rc::details::RCComponent<usart_details::usarts, usart_details::usartComponent>, # <1>
			   public AVR::details::AtmegaZero::template USART_C< usart_details::usartComponent> # <2> 
			   {

	template<USART::RS485Mode RSMode, USART::ReceiverMode receiverMode,
			USART::CommunicationMode ComMode, USART::ParityMode parityMode,
			USART::StopBitMode stopBitMode, USART::CharacterSize CharSize, bool Msb,
			bool StartFrameDetection, bool OpenDrainMode, bool MultiProcessor , bool LoopBackMode>
	struct USARTSetting {
		using AConf = usart_details::usartComponent::CTRLAMasks;
		using BConf = usart_details::usartComponent::CTRLBMasks;
		using CConf = usart_details::usartComponent::CTRLCMasks;

		static constexpr AConf rsmode = static_cast<AConf>(RSMode);
		static constexpr AConf loopbackmode = LoopBackMode ? AConf::Lbme : static_cast<AConf>(0);
		static constexpr BConf opendrainmode = OpenDrainMode ? BConf::Odme : static_cast<BConf>(0);
		static constexpr BConf startframedetection = StartFrameDetection ? BConf::Sfden : static_cast<BConf>(0);
		static constexpr BConf multiprocessor = MultiProcessor ? BConf::Mpcm : static_cast<BConf>(0);
		static constexpr BConf receivermode = static_cast<BConf>(receiverMode);
		static constexpr CConf commode = static_cast<CConf>(ComMode);
		static constexpr CConf paritymode = static_cast<CConf>(parityMode);
		static constexpr CConf stopbitmode = static_cast<CConf>(stopBitMode);
		static constexpr CConf charsize = static_cast<CConf>(CharSize);
		static constexpr CConf msb = !Msb ? CConf::Udord : static_cast<CConf>(0);
	}; # <3>
private:
	using Component_t = usart_details::usartComponent;
};
----
<1> Legt fest dass die Komponente vom RessourceController gesteuert wird
<2> Importiert die Enum-Klassen der 0 Familie aus der entsprechenden Komponente
<3> Konfigurationen der Schnittstelle

Die obige Struktur zeigt den Aufbau einer Microcontrollerklasse, mit der Eigenschaft, dass die Komponente vom RessourceController verwaltet wird. Die Setting Struktur ermöglich eine einfache und flexible Konfiguration der Schnittstelle, aus dieser werden später dann in den entsprechenden 'init' Methoden die Register eingestellt.

== AtmegaZero Struktur

[source,C++]
----         
namespace AVR {
    namespace details {
        struct AtmegaZero {
			//lines omitted....
template<typename twiComponent>
struct TWI_C {
	enum class SDASetup: mem_width {
		SDASetup_off = static_cast<mem_width>(twiComponent::CTRLAMasks::Sdahold_off),
		SDASetup_50ns = static_cast<mem_width>(twiComponent::CTRLAMasks::Sdahold_50ns) ,
		SDASetup_300ns = static_cast<mem_width>(twiComponent::CTRLAMasks::Sdahold_300ns) ,
		SDASetup_500ns = static_cast<mem_width>(twiComponent::CTRLAMasks::Sdahold_500ns) ,
	};

	enum class SDAHold: mem_width {
		Setup4Cycles = static_cast<mem_width>(twiComponent::CTRLAMasks::Sdasetup_4cyc),
		Setup8Cycles = static_cast<mem_width>(twiComponent::CTRLAMasks::Sdasetup_8cyc)
	};

	enum class MasterTimeout: mem_width {
		Disabled = static_cast<mem_width>(twiComponent::MCTRLAMasks::Timeout_disabled),
		T_50us = static_cast<mem_width>(twiComponent::MCTRLAMasks::Timeout_50us),
		T_100us = static_cast<mem_width>(twiComponent::MCTRLAMasks::Timeout_100us),
		T_200us = static_cast<mem_width>(twiComponent::MCTRLAMasks::Timeout_200us)
	};

};
----

Diese Struktur dient dazu die verschiedenen Einstellungen aus den HW-Dateien aufzugliedern und in sinnvolle Gruppen zu packen, sodass in den Setting Strukturen vom Benutzer klare Einstellungen möglich sind. In C-Style müssten die Benutzer den entsprechenden Registern per Makros und Bit-Operationen dann die entsprechenden Werte zuweisen, diese vorgehensweise ist unübersichtlich, fehleranfällig und wird hier ganz klar vermieden.

== RessourceController

=== RCComponent

[source,C++]
----
template<typename instances, typename Component_t, typename instances2 = void>
class RCComponent {

	template<typename Alias>
	friend struct AVR::rc::details::resolveComponent;

	template<typename Alias, typename T = instances2>
	struct comps {
		using inst  = typename  instances::inst;
		using alt  = typename  inst::alt;

		static_assert(Meta::contains_all<typename instances2::template inst<Alias::Instance>::template alt<Alias::Alternative>::list,typename alt::list>::value, "not available pin was set up");
	}; # <1>

	template<typename Alias>
	struct comps<Alias,void>{
		using inst  = typename  instances::template inst<Alias::Instance>;
		using alt  = typename  inst::template alt<Alias::Alternative>;
	}; # <2>
public:
	static constexpr bool isRCComponent = true;

	template<auto number>
	static inline auto getBaseAddress(){
		return (typename Component_t::registers*) &instances::template inst<number>::value();
	} # <3>
	
};
----
<1> Spezialisierung für eine Teilprüfung der IO Pins
<2> Spezialisierung für eine Vollprüfung der IO Pins
<3> Realisierung der BCMPP legacy-Funktion getBaseAddress

Diese Struktur wird im RessourceController genutzt um z.B. auf die HW-Instanzen zuzugreifen um schließlich die IO Pins zu vergleichen. Je nach Komponente ist e möglich dass nicht alle Pins überprüft werden die in den Komponenten verfügbar sind, z.B. der ADC.

=== Die Kernklasse

[source,C++]
----
template<typename MCU,typename FIRST,typename... INSTANCES>
class ResController {
	
	template<typename Alias>
	using resolveAlt = typename details::resolveComponent<Alias>::alt;
	template<typename Alias>
	using resolveInst = typename details::resolveComponent<Alias>::inst;
----

Hier wird als erstes die MCU übergeben (idr. DEFAULT_MCU), danach folgen eine - beliebig viele Ressourcen (0 Ressourcen macht keinen Sinn). Die beiden Alias Metafunktionen sollen jeweils die erste oder 2. Ebene in der HW-Struktur einer Instanz zurückgeben und eine kürzere und übersichtlichere Schreibweise innerhalb des RC zur Folge haben.

[source,C++]
----
template<typename N>
struct getRessource {
	using type = utils::tuple<typename get_ressource_help<N, FIRST, INSTANCES...>::inst,typename get_ressource_help<N, FIRST, INSTANCES...>::alt>;
		static_assert(!std::is_same<typename type::t2, void>::value, "portmux not found"); # <1>
		static_assert(checkRessource<FIRST, INSTANCES...>(), "I/O Pins conflicting"); # <2>
		static_assert(checkInstance<FIRST, INSTANCES...>(), # <3>
					  "only 1 alternative from a single instance permitted");
};

template<typename N>
using getRessource = typename getRessource<N>::type;
----
<1> Prüfung ob die Portmux-Variante existiert
<2> Prüfung ob die I/O Pins Kollisionsfrei sind
<3> Prüfung auf doppelt Belegung einer Instanz durch mehrere Portmux-Varianten

Hier zu sehen sind die einzelnen Prüfungen die der RessourceController durchführt während er die angeforderte Ressource frei gibt.

==== Zu Punkt 2

[source, C++]
----
template<typename _first,typename... pins>
static constexpr bool checkRessource() {
	using first = typename resolveAlt<_first>::list;
					
	if constexpr(sizeof...(pins) == 0)
	return true;
	else return checkRessourceHelper<first,pins...>();
}
----

Dies ist die Startfunktion um zu Prüfen ob die Pins Kollisionsfrei sind, hierzu wird die Liste der Pins innerhalb der konkreten Instanzen benötigt. Falls 'pins' 0 Elemente enthält gibt es nur eine Ressource und somit keine Kollision, ansonsten muss die rekursive Hilfsfunktion aufgerufen werden.

[source,C++]
----
template<Meta::concepts::List first,typename _second, typename... pins>
static constexpr bool checkRessourceHelper(){
	
	using second = typename resolveAlt<_second>::list;
	
	if constexpr(sizeof...(pins) > 0){
		constexpr bool current = !Meta::contains_any<first, second>::value; # <1>
		constexpr bool next =  checkRessourceHelper<Meta::concat_t<first,second>, pins...>(); # <2>
		return  current && next ;
	}
	else {
		return !Meta::contains_any<first,second>::value; # <3>
	}
}
----
<1> Aktuelle Rekursionsstufe
<2> Nächste Rekursionsstufe
<3> Rekursionsende

Die Prüfung auf Kollisionsfreiheit Funktioniert so, dass auf der aktuellen Stufe immer überprüft wird ob irgendein Element der aktuellen Pinliste in der nächsten enthalten ist, danach wird die aktuelle Liste mit der nächsten vereinigt und als erste Liste übergeben, das geht solange bis es in 'pins' keine weiteren Listen mehr gibt.

NOTE: Die CheckInstance Methode funktioniert Analog (bloß das die Pinlisten nicht überprüft werden sondern die HW-Instanzen)

TWI Command und Callback Aufbau

Die TWI Schnittstelle ist grundsätzlich so Aufgebaut dass sie (wenn mit Fifos benutzt) genauso verwendet werden kann wie die anderen Kommunikationsschnittstellen, die einzige Besonderheit ist das Callback beim lesen. Damit diese einfache Bedienung der Schnittstelle möglich ist, müssen Intern die Command Strukturen gespeichert werden.

[source,C++]
----
static inline auto noop = []{}; # <1>

template<bool singlemode = false, bool callback = false>
struct Command {
	uint8_t address = 0; # <2>
	uint8_t bytes = 0; # <3>
	readWrite access = write; # <4>
	void (*Callback)() = (void (*)()) noop; # <5>

	void operator=(const volatile Command &other) volatile {
		address = other.address;
		bytes = other.bytes;
		access = other.access;
		Callback = other.Callback;
	}
};
----
<1> Leerer Funktionsaufruf (wenn geschrieben wird)
<2> Adresse des anderen Device
<3> Anzahl zu lesender/schreibender Bytes
<4> Lesen oder Schreiben
<5> Callback für lesen

Die Command Struktur wird benötigt um gewisse Informationen zur Laufzeit zu speichern und auszuwerten. Diese Struktur wiederum wird in einer Fifo gespeichert, wenn z.B. Bytes gelesen werden sollen so wird eine entsprechende Command Struktur erzeugt und in der Fifo abgelegt. 
 
NOTE: Die oben gezeigte Command Struktur besitzt noch einige Spezialisierungen um bei verschiedenen Condtionen nicht benötigte Member auszulassen (z.B bei einem WriteOnly wird weder das Callback- noch das Accessmember benötigt).

[source,C++]
----
static inline void put(bit_width *data, uint8_t size) {

	if constexpr(_TWI::isWriteOnly)
		CommandStack.push_back(command{(address << 1), size}); # <1>
	else
		CommandStack.push_back(command{(address << 1), size, write}); # <2>
	for (uint8_t i = 0; i < size; i++)
		_TWI::fifoOut.push_back(data[i]);
}
----
<1> Command Konstruktor für WriteOnly 
<2> Command Konstruktor für ReadWrite

In diesem Beispiel wird gezeigt wie die Command Struktur genutzt wird um Befehle in eine Fifo zu legen, während dem Periodic Aufruf oder der Interrupt Routine können die Befehle dann aus der Fifo entnommen und verarbeitet werden.

[source,C++]
----
if(TWIMaster::current.access == read){ # <1>
	if ( TWIMaster::current.bytes > 1) { # <2>
		TWIMaster::_TWI::receive();
	} else if( TWIMaster::current.bytes == 1) {
		stopTransactionNack();
		TWIMaster::_TWI::receive();
		TWIMaster::current.bytes = 0;
		TWIMaster::current.Callback();
	}
} else {
	if ( TWIMaster::current.bytes > 0) {
		TWIMaster::_TWI::transfer();
	} else {
		stopTransaction();
	}
}
----