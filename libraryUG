= 0 Series Library Userguide
:icons: font

== Programmierung

.Um die Programme auf die Chips der Atmega 0 Serie zu flashen gibt es grundsätzlich 2 Methoden:
* https://github.com/ElTangas/jtag2updi hier wird ein Atmega328 oder ein vergleichbarer Chip zu einem Programmer umfunktioniert, hierzu kann z.B. ein fertiges Arduino-Board genutzt werden.
* https://github.com/mraardvark/pyupdi hier wird mithilfe eines USB-UART Adapters geflashed, hier muss darauf geachtet werden dass der Widerstand stimmt, sollte der Widerstand nicht funktionieren muss eine Diode mit der Anode zu UPDI und Kathode zu Tx verbunden werden.

== Grundsätzliches

* Die Library stützt sich auf den AVR-GCC 8.3+, es werden intern unter anderem Concepts genutzt, die Verwendung eines aktuellen C++ Compilers ist daher notwendig.
* Am besten wird das enthaltene CMakefile genutzt um das Projekt zu erstellen, um den UC zu wechseln muss lediglich die Variable Mnumber und F_CPU abgeändert werden.
* [Optional] um ein schnelleres Compilieren zu ermöglichen kann nach dem ersten Compilieren in Zeile 112 im CmakeFile eine Zeile auskommentiert werden welche automatische Dateien generiert.
* Es sollten nur die HW-Abstraktionen inkludiert werden, ansonsten kann kein ordnungsgemäßes funktionieren gewährleistet werden.
* Der Erste Include MUSS MCUSelect.hpp sein, hier findet die Auswahl des Gerätes statt.
* Port, PortPin und der Ressource Controller sind Standardmäßig inkludiert und müssen nicht nochmal explizit inkludiert werden.
* Es ist notwendig, dass die von Atmel bereitgestellten header, library-files sowie device-specs der toolchain hinzugefügt werden. 

== Basics
Zunächst wird betrachtet wie die Ports oder auch spezifische Pins über die Library angesteuert werden.

[source,c++]
----
#include "MCUSelect.hpp"
#include "hw_abstractions/Delay.hpp"

using portA = AVR::port::Port<AVR::port::A>;
using portC = AVR::port::Port<AVR::port::C>;
using led1 = AVR::port::Pin<portA,2>;
using led2 = typename portC::pins::pin3;
using led3 = AVR::port::Pin<portA,3>;
using led4 = AVR::port::Pin<portA,4>;
using led5 = AVR::port::Pin<portA,5>;

int main() {

    portA::setDir<AVR::port::Out>();
    led2::setOutput();
    while(true){
        led1::toggle();
        if(led2::isOn())
            led3::toggle();
        led2::toggle();
        AVR::port::pinsOutToggle<led4,led5>();
        AVR::delay<AVR::ms,500>();
    }
	
}
----

Zunächst werden die Ports ausgewählt welche angesprochen werden sollen, hier in diesem Falle Port A und C. Sollte bei der Auswahl ein Compiler Fehler auftreten wurde ein nicht existenter Port ausgewählt (der Atmega4808 besitzt z.B. keinen Port B oder E obwohl es Defines dafür gibt). Der nächste Schritt ist die Auswahl von spezifischen Pins, dafür wird dem template-Alias der zuvor gewählte Port sowie die Pin Nummer angegeben. Hier muss darauf geachtet werden dass die spezifischen Pins NICHT auf Verfügbarkeit geprüft werden, um sicher zu gehen können die Pins auch aus dem Port entnommen werden (s.a. Led2), die hier enthaltenen Pins sind definitiv physikalisch vorhanden. Nachdem die Auswahl für Ports und/oder Pins getroffen wurden können auf diesen Operationen ausgeführt werden. Es könne sowohl auf den Ports als auch auf den Pins spezifische Operationen ausgeführt werden (z.B. toggle, on, off,setDir ….). Sollen auf mehreren Pins gleichzeitig Operationen ausgeführt werden, so können die freien Funktionen in AVR::port genutzt werden. Bei den freien Funktionen ist zu beachten, dass nur Pins des gleichen Ports übergeben werden können, verschiedene Ports lösen einen Compiler-Fehler aus. Die Port Klasse besitzt noch die Convenience-Methode „get“ um auf Register zuzugreifen, damit kann von außerhalb auf ein spezifisches Register (z.B. pin0ctrl) zugegriffen werden. Wenn möglich sollte diese Methode aber vermieden und vorhandene abstraktere Klassen-Methoden genutzt werden. Im obigen Beispiel findet sich die delay-Methode, diese wrappt die C _delay Methoden und rechnet je nach Einheit (us, ms, s) korrekt um. Des weiteren gibt es noch eine safeDelay-Methode, diese schaltet die Interrupts für die Dauer des wartens ab und funktioniert somit immer korrekt (sollten die Interrupts angeschaltet gewesen sein werden sie nach Ablauf des delays wieder aktiviert).


== Ressourcecontroller
Die Library stellt eine Klasse zur Verfügung mit welcher die Ressourcen auf ihre Kollisionsfreiheit überprüft werden können. Wenn diese Klasse genutzt wird ist es ausgeschlossen dass darin angeforderte Ressourcen sich überschneiden, wenn z.B TWI PortA Pin 3 braucht und eine weitere Ressource diesen Pin belegen wollen würde, so würde das Programm nicht kompilieren und eine entsprechende Fehlermeldung ausgegeben.

[source,C++]
----
using twiInstance = AVR::rc::Instance<
        AVR::twi::TWI, // using ressource SPI
        AVR::rc::Number<0>, //using instance '0'
        AVR::portmux::PortMux<0>>; // using portmux 0 alternative

using usartInstance = AVR::rc::Instance<
        AVR::usart::USART_Comp, 
        AVR::rc::Number<2>, 
        AVR::portmux::PortMux<0>>; 

using RC = AVR::rc::RessourceController<twiInstance,usartInstance>; 

using twiRessource = RC::getRessource_t<twiRessource>;
using usartRessource = RC::getRessource_t<usartRessource>;

using usart = AVR::usart::USART<AVR::blocking,usartRessource>;

using twi = AVR::twi::TWIMaster<AVR::blocking,twiRessource , AVR::ReadWrite>;
----

Zuerst wird die spezifische Instance einer Ressource festgelegt, diese besteht aus der Ressource selbst, diese sind immer in den dazugehörigen namespaces abgelegt (z.B. TWI/USART). Danach wird der RessourceController mit den zu benutzenden Instanzen belegt, danach kann mit der getRessource_t Klassen-Methode die Ressource angefordert werden. Sollten anderweitig noch Pins genutzt werden (z.B vom Benutzer für led's oder sonstiges) so kann/sollte eine GenericRessource erzeugt und übergeben werden (Auch hier wird die physikalische Existenz der Pins nicht überprüft!).

[source,C++]
----
using led1 = Pin<PortA, 0>;
using led2 = Pin<PortA, 1>;
using led3 = Pin<PortD, 6>;

using gRes = AVR::rc::GenericRessource<led1,led2,led3>;

using RC = AVR::rc::RessourceController<twiIntance,usartInstance,gRes >;
----

Wenn alle Ressourcen mit dem RessourceController überprüft werden ist ein Konflikt der Ressourcen Belegung zur Compile-Zeit ausgeschlossen. Zu beachten ist allerdings dass bei den meisten Ressourcen wie z.B. TWI, USART und SPI alle Pins welche dort benutzt werden können auch geprüft werden. Sollte also z.B. MasterSPI als ReadOnly konfiguriert werden so wird logischerweise der Miso-Pin nicht benutzt, aber im RessourceController trotzdem geprüft. 

[source,C++]
----
using spiRessource = AVR::rc::Instance<
AVR::spi::SPI, 
AVR::rc::Number<0>, 
AVR::portmux::PortMux<0>>; 

using uncheckedSPI = AVR::rc::UncheckedRessource_t<spiRessource>;
using spi = AVR::spi::SPIMaster<AVR::notBlocking<AVR::UseFifo<42> ,AVR::Interrupts<> >,uncheckedSPI , AVR::ReadOnly>;
----

Sollte der besagte Pin trotzdem von einer anderen Ressource verwendet werden besteht die Möglichkeit eine Ressource von der Prüfung auszuschließen indem UncheckedRessource verwendet wird.

== Eventsystem

Das Eventsystem der 0 Serie ermöglicht Peripherie Abhängige Funktionalitäten mit deren Hilfe die Peripherie ohne Interrupts Synchron und Asynchron kommunizieren kann. Das Eventsystem kann nur so konfiguriert werden dass je Kanal ein Generator läuft und dieser Kanal jeweils von beliebig vielen Users abgehört werden kann, die einzelnen Funktionen der Users sowie das Verhalten der Generatoren müssen vor Benutzung nachgelesen werden. Da die Konfigurationsmöglichkeiten beschränkt sind fällt die Schnittstelle entsprechend Schmal aus.

[source,C++]
----
using ch0 = AVR::eventsystem::Channel<0>;
using ch0_gen = typename ch0::generators::generals::spi0_sck;
using user0 = typename ch0::users::evtca0;
using user1 = typename ch0::users::evtcb0;

int main() {
    ch0::template registerListener<user0,user1>();
    ch0::template setGenerator<ch0_gen >();
    ch0::softwareEvent();
}
----

Zunächst wird der Kanal ausgewählt der Benutzt werden soll (Kanal 0- maximal 8), sollte hier ein ungültiger Kanal gewählt werden wird das Programm nicht kompilieren. Als nächstes wird der Generator und der/die Benutzer ausgewählt. Dann werden die Benutzer auf den Kanal eingestellt und der Generator wird für den Kanal eingestellt. Das Eventsystem ermöglicht des Weiteren das Auslösen von Software-Events, dies wird mir der entsprechenden Funktion ermöglicht.

== TWI

Die TWI Schnittstelle ist aus Aufwandsgründen nur für den Master Modus eingerichtet, die Quick-Command Funktionalität wurde aus Gründen der Kompatibilität zwischen TWI und I²C abgeschaltet, hier wurden Probleme bei der Kommunikation zwischen verschiedenen Geräten sichtbar. Ansonsten kann die TWI-Master Schnittstelle mit allen möglichen Eigenschaften konfiguriert werden, empfehlenswert ist aber lediglich die Anpassung der Zugriffsart (RW / R / W) sowie Blockierend / nicht blockierend oder auch Interruptdriven, ob eine FiFo genutzt wird und Instanzauswahl (wenn die anderen Eigenschaften angepassst werden so ist das Verhalten NICHT getestet), nachfolgend einige Beispiele.
Die Frequenzrate wird über die init Methode festgelegt, sofern fastmode plus nicht aktiviert ist (default Einstellung ist aus), so ist die rate auf 400khz beschränkt.

WARNING: Es wird nicht kontrolliert ob der Slave die Adresse bestätigt hat ,dieser Fall sollte/muss abgefangen werden!

=== Beispielbehandlung TWI Address-NACK

[source,C++]
----
auto rd = twi::scopedRead<43>();

while(! twi::writeComplete()) {
    while(! twi::slaveAcknowledged()) {
        while (!twi::endTransaction());
        rd = twi::scopedRead<43>();
    }
}
----

Hier wird zuerst effektiv auf das Beenden der Start-Condition gewartet, danach wird eine Stop-Condition ausgelöst damit die Start Condition wiederholt werden kann. Die Behandlung besteht hier darin es solange zu versuchen bis der Slave bestätigt, andere Behandlungsmethoden sind z.B. das versuchen einer anderen Adresse oder eine andere Programm-Routine auszuführen.


=== Lesen mit FiFo, keine Interrupts

[source,C++]
----
using twi = AVR::twi::TWIMaster<AVR::notBlocking<AVR::UseFifo<42>,AVR::NoInterrupts>,twires , AVR::ReadOnly>;

volatile bool wasread = false;

static inline void Callback (){
    wasread=true;
    uint8_t item;
    while(twi::getInputFifo().pop_front(item))
        AVR::dbgout::put(item);
}

int main() {
    twi::init<100000>();
    AVR::dbgout::init();
    while(true){
        twi::get<42,Callback>(12);
        while(!wasread)
            twi::periodic();
        AVR::dbgout::flush();
        AVR::delay<AVR::ms,200>();
        wasread = false;
    }
}
----

Dieses Beispiel zeigt die Konfiguration der Schnittstelle als nicht blockierend, Readonly und Fifo Benutzend und ohne Interrupts, bei der TWI Schnittstelle wurde auf eine nicht blockierende Variante ohne FiFo verzichtet, da diese Version mangels Abstraktion zu fehleranfällig wäre. Die get Methode wird mit den template Parametern der Addresse und einer Callback Funktion (oder auch lambda) versehen, als Parameter wird die Anzahl der zu lesenden Bytes übergeben. Ohne Interrupts muss in der Schleife periodic aufgerufen werden, sonst werden weder Daten empfangen noch gesendet. Wenn der Lesevorgang vollendet wurde (die angegebene Anzahl an Bytes wurde gelesen), wird die Callback Funktion aufgerufen und der Benutzer kann festlegen was passieren soll (sinnvoll ist auf jedenfall die FiFo zu leeren wie im Beispiel).

=== Schreiben mit FiFo, keine Interrupts 

[source,C++]
----
static constexpr const char* hello = "Hello Slave";

int main() {
    twi::init();

    static constexpr auto len = utils::strlen(hello);

    while(true){
        twi::put<42>((uint8_t*)hello,len);
            while( twi::dataToSend())
                twi::periodic();

        AVR::delay<AVR::ms,200>();
    }
}
----

Hier im Beispiel wird die Verwendung des Schreibens gezeigt, hier wird solange periodic aufgerufen bis keine Daten zum Schreiben mehr vorhanden sind.

=== Lesen nicht blockierend, keine Interrupts, keine FiFo

[source,C++]
----
using twi = AVR::twi::TWIMaster<AVR::notBlocking<AVR::NoFifo,AVR::NoInterrupts>,twires , AVR::ReadOnly>;
static constexpr uint8_t size = 12;
static uint8_t arr[size];

int main() {
    twi::init();
    while(true){
        while(!twi::startTransaction<42,AVR::twi::access::Read>());
        uint8_t tmp = 0;
        while(tmp != size){
            tmp += twi::receive(arr,size-tmp);
        }
        
        AVR::delay<AVR::ms,200>();
        
    }
}
----

wird keine FiFo genutzt dann wird von der receive Methode die Anzahl gelesener Bytes zurückgegeben (bei einem einzelnen Lesevorgang ein Boolean ob ein Byte gelesen wurde), logischerweise muss der Anwender ohne FiFo eigene Maßnahmen treffen um entsprechend viele Bytes zu lesen (siehe Beispiel code). Auch das Auslösen der Start – sowie StopCondition müssen dann manuell eingepflegt werden, Ausnahme betrifft das lesen, hier wird die stopCondition mit dem lesen des letzen Bytes austomatisch ausgeführt.

=== Lesen nicht blockierend, Scoped-Variante

[source,C++]
----
static constexpr uint8_t size = 12;
static uint8_t arr[size];
int main() {
    twi::init();
    while(true){
        uint8_t tmp = 0;
        auto rd = twi::scopedRead<42>();
        uint8_t data;
        while(tmp != 11){
            if(rd.receive(data))
                arr[tmp++] = data;
        }
        while(!rd.receiveLast(data));
        arr[tmp] = data;
}
----

Alternativ können bei nicht verwenden der nicht blockierenden NoFifo Varianten auch Scoped Varianten genutzt werden, somit muss sich nicht mehr explizit um die Start-Stop Conditions gekümmert werden, auch hier gilt die Ausnahme des Lesens (siehe Beispiel).

=== Schreiben nicht blockierend, Scoped-Variante

[source,C++]
----
static constexpr const char* hello = "Hello Slave";

int main() {
    twi::init();

    static constexpr auto len = utils::strlen(hello);

    while(true){
        auto wr = twi::scopedWrite<42>();
        for(uint8_t i = 0; i < len; ) {
            if (wr.send((uint8_t) *(hello + i)))
                i++;
        }
        
        AVR::delay<AVR::ms,200>();
    }
}
----

Hier wird noch die ScopedWrite Variante gezeigt, somit muss der Nutzer sich nicht um Start-Stop Conditions kümmern.

=== Schreiben nicht blockierend, FiFo mit Interrupts

[source,C++]
----
static constexpr const char* hello = "Hello Slave";
using twi = AVR::twi::TWIMaster<AVR::notBlocking<AVR::UseFifo<42>,AVR::Interrupts<>>,twires , AVR::WriteOnly>;

ISR(TWI0_TWIM_vect){
    twi::intHandler();
}

int main() {
    twi::init();
    static constexpr auto len = utils::strlen(hello);
	
    while(true){
        twi::put<42>((uint8_t*)hello,len);
        AVR::delay<AVR::ms,200>();
    }
}
----

Diese Interrupt gesteuerte Version wird im Intervall von 200 ms den String Hello Slave an den Slave mit der Addresse 42 senden.

=== Lesen nicht blockierend, FiFo mit Interrupts

[source,C++]
----
using twi = AVR::twi::TWIMaster<AVR::notBlocking<AVR::UseFifo<42>,AVR::Interrupts<>>,twires , AVR::ReadOnly>;

volatile bool wasread = false;

ISR(TWI0_TWIM_vect){
    twi::intHandler();
}

static inline void Callback (){
    wasread=true;
    uint8_t item;
    while(twi::getInputFifo().pop_front(item))
        AVR::dbgout::put(item);
}

int main() {
    twi::init();
    AVR::dbgout::init();
    while(true){
        twi::get<42,Callback>(12);
        while(!wasread)
            ;
        AVR::dbgout::flush();
        AVR::delay<AVR::ms,200>();
        wasread = false;
    }
}
----

Diese Version erhält vom Slave mit der Addresse 42 je Iteration 12 Datenbytes, nachdem diese gelesen wurden wird der Callback ausgeführt (in diesem Falle werden die Datenbytes über die Debug-Schnittstelle an den PC gesendet → nur 4808 verfügbar und die innere While-Schleife der main Methode unterbrochen).

=== Lesen und schreiben nicht blockierend, FiFo mit Interrupts

[source,C++]
----
using twi = AVR::twi::TWIMaster<AVR::notBlocking<AVR::UseFifo<42>,AVR::Interrupts<>>,twires , AVR::ReadWrite>;

ISR(TWI0_TWIM_vect){
    twi::intHandler();
}

volatile bool wasread = false;
static inline void Callback (){
    wasread=true;
    uint8_t item;
    while(twi::getInputFifo().pop_front(item))
        AVR::dbgout::put(item);
}

int main() {
    twi::init();
    AVR::dbgout::init();
    while(true){
        twi::get<42,Callback>(12);
        while(!wasread)
            ;
        AVR::dbgout::flush();
        twi::put<42>('H');
        AVR::delay<AVR::ms,200>();
        wasread = false;
    }
}
----

Als abschließendes Beispiel wird hier noch eine kombinierte Version gezeigt (lesen und Schreiben).

== SPI

Das SPI-Interface ist ähnlich gestaltet wie bei TWI, mit der Ausnahme dass hier in keinem Fall auf start- oder stop Conditions oder der gleichen geachtet werden muss. Weiterhin wird auch ein Interrupthandler für die Benutzung ohne Fifo und der Slave Modus zur Verfügung gestellt. Hier gibt es keine Option in der init Methode die Frequenz einzustellen, dies geschieht über die Prescaler-Option während der Schnittstellen-Konfiguration.

=== Schreiben, nicht blockierend, FiFo ohne Interrupts

[source,C++]
----
using spi = AVR::spi::SPIMaster<AVR::notBlocking<AVR::UseFifo<42> ,AVR::NoInterrupts >,res, AVR::ReadWrite>;  

int main() {
    spi::init();
    AVR::dbgout::init();
    while(true){
        spi::put('h');
        spi::put('e');
        spi::put('l');
        spi::put('l');
        spi::put('o');
        for(uint8_t i = 0; i < 5; i++) {
            spi::periodic();
            AVR::delay < AVR::us, 5 > ();
        }
        uint8_t item;
       while(spi::getInputFifo().pop_front(item)) {
           AVR::dbgout::put(item);
       }
        AVR::dbgout::flush();
    }
}
----

NOTE: Die Nicht blockierende Variante ohne Interrupts lässt sich ebenso verwenden wie die TWI-Schnittstelle.

=== Schreiben, nicht blockierend, FiFo mit Interrupts

[source,C++]
----
using spi = AVR::spi::SPIMaster<AVR::notBlocking<AVR::UseFifo<42> ,AVR::Interrupts<> >,res, AVR::ReadWrite>; 

ISR(SPI0_INT_vect){
    spi::intHandler();
}

int main() {
    spi::init();
    AVR::dbgout::init();
    while(true){
        spi::put('h');
        spi::put('e');
        spi::put('l');
        spi::put('l');
        spi::put('o');
        uint8_t item;
       while(spi::getInputFifo().pop_front(item)) {
           AVR::dbgout::put(item);
       }
        AVR::dbgout::flush();
    }
}
----

Hier zu sehen ist eine Interrupt-Version des SPI, um die gelesenen Bytes auszugeben muss lediglich die fifo ausgelesen werden (siehe Beispiel). Wird eine ReadWrite Variante genutzt so wird die Library eine Null transferieren sofern keine Nutzdaten vorhanden sind. Sollte keine Fifo verwendet und kein WriteOnly eingestellt sein so muss ein Protokolladapter festgelegt werden.

== USART

Die USART Schnittstelle lässt sich im Grunde genauso bedienen wie SPI und TWI.
.Hier müssen besonders 2 Dinge beachtet werden:
* Baudrate: Hier ist es essentiell wichtig dass vor allem der F_CPU Wert stimmt und das eine zu dem Ziel-Gerät passende Baudrate eingestellt ist (default 115200).
* Besonderheit Interrupts: Hier gibt es 2 Interrupt Vectoren (der TX-Vector wird nicht beachtet) und deswegen auch 2 Interrupt-Handler (tx/rxHandler).

Für den Atmega4808 ist ein Debug-Interface in der Library enthalten (AVR::dbgout → include Datei = inc/Boards/CuriosityNanoIOT.hpp), mit diesem kann für das IoT-Devboard von Microchip über das USB-Interface bequem kommuniziert werden, dabei ist zu beachten das dieses blockierend arbeitet und USART2 benutzt.

[source,C++]
----
using usart =AVR::usart::USART<AVR::notBlocking<AVR::UseFifo<42>, AVR::Interrupts<>>,usartres, AVR::ReadWrite>;

ISR(USART2_DRE_vect){
    usart::txHandler();
}
ISR(USART2_RXC_vect){
    usart::rxHandler();
}

int main() {
    usart::init<115200>();
    while(true){
        usart::put('h');
        usart::put('e');
        usart::put('l');
        usart::put('l');
        usart::put('o');
        AVR::delay<AVR::ms,200>();
    }
}
----

Hier im Beispiel wird die Verwendung der Interrupt Variante für Read und Write Zugang beschrieben, beachtet werden muss dass der TX Vector nicht verwendet werden darf, stattdessen muss der DRE Vector verwendet werden.