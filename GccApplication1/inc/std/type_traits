/*
 * WMuCpp - Bare Metal C++ 
 * Copyright (C) 2016, 2017 Wilhelm Meier <wilhelm.wm.meier@googlemail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "cstdint"

namespace std {
    
    typedef decltype(nullptr) nullptr_t;
    
    // The underlying type of an enum.
    template<typename _Tp>
    struct underlying_type {
        typedef __underlying_type(_Tp) type;
    };
    
    template< class... >
    using void_t = void;

    template<typename T, T v>
    struct integral_constant {
        inline static constexpr T value = v;
        typedef T value_type;
        typedef integral_constant<T, v> type;
        constexpr operator T() const {return v;}
    };

    typedef integral_constant<bool, true>  true_type;
    typedef integral_constant<bool, false> false_type;
    
    template<typename...>
    struct true_t : true_type {};
    template<typename...>
    struct false_t : false_type {};
    
    template<typename... TT>
    inline constexpr bool false_v = false_t<TT...>::value;
    
    
    template<bool B, class T = void>
    struct enable_if {};
    
    template<class T>
    struct enable_if<true, T> {
        typedef T type;
    };
    
    template<bool B>
    using enable_if_t = typename enable_if<B>::type;
    
    template<bool B, class T = void>
    struct enable_if_not {};
    
    template<class T>
    struct enable_if_not<false, T> {
        typedef T type;
    };

    template<bool B>
    using enable_if_not_t = typename enable_if_not<B>::type;
    
    template<bool B, class T, class F>
    struct conditional { 
        typedef T type; 
    };
    
    template<class T, class F>
    struct conditional<false, T, F> { 
        typedef F type; 
    };
    
    template<bool B, typename T, typename F>
    using conditional_t = typename conditional<B, T, F>::type;
    
    template<class T, class U>
    struct is_same final : false_type {};

    template<class T>
    struct is_same<T, T> final : true_type {};
    
    template<typename U, typename V>
    inline constexpr bool is_same_v = std::is_same<U, V>::value;
    
    template< class T > struct add_cv { typedef const volatile T type; };
    template< class T> struct add_const { typedef const T type; };
    template< class T> struct add_volatile { typedef volatile T type; };
    
    template< class T > struct remove_const          { typedef T type; };
    template< class T > struct remove_const<const T> { typedef T type; };
    
    template< class T > struct remove_volatile             { typedef T type; };
    template< class T > struct remove_volatile<volatile T> { typedef T type; };
    
    template< class T >
    struct remove_cv {
        typedef typename std::remove_volatile<typename std::remove_const<T>::type>::type type;
    };
    
    template< class T >
    using remove_cv_t       = typename remove_cv<T>::type;
    template< class T >
    using remove_const_t    = typename remove_const<T>::type;
    template< class T >
    using remove_volatile_t = typename remove_volatile<T>::type;
    
    template<typename T1, typename T2>
    struct logic_or : public std::conditional<T1::value, T1, T2>::type {};
    
    template<typename T1, typename T2>
    struct logic_and : public std::conditional<T1::value, T2, T1>::type {};
    
    template<typename T>
    struct logic_not : public integral_constant<bool, !T::value> {};
    
    namespace detail {
        template<typename T>
        struct is_integral_base : public false_type {};
        template<>
        struct is_integral_base<uint8_t> : public true_type {
        };
        template<>
        struct is_integral_base<int8_t> : public true_type {
        };
        template<>
        struct is_integral_base<uint16_t> : public true_type {
        };
        template<>
        struct is_integral_base<int16_t> : public true_type {
        };
        template<>
        struct is_integral_base<uint32_t> : public true_type {
        };
        template<>
        struct is_integral_base<int32_t> : public true_type {
        };
        template<>
        struct is_integral_base<uint64_t> : public true_type {
        };
        template<>
        struct is_integral_base<int64_t> : public true_type {
        };
        
        template<typename T>
        struct is_floatingpoint_helper : public false_type {};
        template<>
        struct is_floatingpoint_helper<float> : public true_type {};
        template<>
        struct is_floatingpoint_helper<double> : public true_type {};
        
        template<typename T>
        struct is_signed_helper: public integral_constant<bool, T(-1) < T(0)> {};
        
    } // !detail

    template<typename T> struct make_unsigned;
    
    template<> struct make_unsigned<int8_t> {
        typedef uint8_t type;
    };
    template<> struct make_unsigned<int16_t> {
        typedef uint16_t type;
    };
    template<> struct make_unsigned<int32_t> {
        typedef uint32_t type;
    };
    template<> struct make_unsigned<int64_t> {
        typedef uint64_t type;
    };
    template<> struct make_unsigned<uint8_t> {
        typedef uint8_t type;
    };
    template<> struct make_unsigned<uint16_t> {
        typedef uint16_t type;
    };
    template<> struct make_unsigned<uint32_t> {
        typedef uint32_t type;
    };
    template<> struct make_unsigned<uint64_t> {
        typedef uint64_t type;
    };

    template<typename T>
    using make_unsigned_t = typename make_unsigned<T>::type;
    
    template<typename T>
    struct is_integral : public detail::is_integral_base<typename std::remove_cv<T>::type> {};
    
    template<typename T>
    inline constexpr bool is_integral_v = is_integral<T>::value;
    
    template<typename T>
    struct is_floating_point : public detail::is_floatingpoint_helper<typename std::remove_cv<T>::type> {};

    template<typename T>
    inline constexpr bool is_floating_point_v = is_floating_point<T>::value;
    
    template<typename T>
    struct is_arithmatic : public logic_or<is_integral<T>, is_floating_point<T>>::type {};

    template<typename T>
    inline constexpr bool is_arithmatic_v = is_arithmatic<T>::value;
    
    template<typename T>
    struct is_signed : public logic_and<is_arithmatic<T>, detail::is_signed_helper<T>>::type {};

    template<typename T>
    inline constexpr bool is_signed_v = is_signed<T>::value;
    
    template<typename T>
    struct is_unsigned : public logic_and<is_arithmatic<T>, logic_not<is_signed<T>>>::type {};

    template<typename T>
    inline constexpr bool is_unsigned_v = is_unsigned<T>::value;
    
    template<typename T>
    struct is_volatile : false_type {};

    template<typename T>
    struct is_volatile<volatile T> : true_type {};

    template<typename T>
    inline constexpr bool is_volatile_v = is_volatile<T>::value;
    
//    template< class T >
//    struct is_void : std::is_same<void, typename std::remove_cv<T>::type> {};
    
    template< class T >
    struct is_fundamental
      : std::integral_constant<
            bool,
            std::is_arithmatic<T>::value ||
            std::is_same<void, typename std::remove_cv<T>::type>::value  ||
            std::is_same<std::nullptr_t, typename std::remove_cv<T>::type>::value
    > {};
    
    enum class endian { // since c++20
#ifdef _WIN32
        little = 0,
        big    = 1,
        native = little
#else
        little = __ORDER_LITTLE_ENDIAN__,
        big    = __ORDER_BIG_ENDIAN__,
        native = __BYTE_ORDER__
#endif
    };
    
}
